//----------------------------------------------------------------------------//
//---------------------------------|  V  E  |---------------------------------//
//----------------------------------------------------------------------------//
#pragma once
//----------------------------------------------------------------------------//
#if VE_VULKAN
//----------------------------------------------------------------------------//
#include "systems/render/api/vulkan/ve_vulkan_resource.h"
#include "systems/render/api/vulkan/ve_vulkan_queue.h"
//----------------------------------------------------------------------------//
START_NAMESPACE(ve)
START_NAMESPACE(render)
//----------------------------------------------------------------------------//
// Forward declarations.
class Display;

//----------------------------------------------------------------------------//
// Vulkan device.
class PlatformDevice
{
public:
	// Constructor.
	PlatformDevice();

	// Destructor.
	~PlatformDevice();

	// Move constructor.
	PlatformDevice(PlatformDevice&&) noexcept;

	// Move operator.
	PlatformDevice& operator =(PlatformDevice&&) noexcept;

	// Copying is prohibited.
	PlatformDevice(const PlatformDevice&) = delete;
	PlatformDevice& operator =(const PlatformDevice&) = delete;

protected:
	VkRc<vk::instance> instance;
	VkRc<vk::dbg_messenger> dbg_messenger;
	VkRc<vk::device> device;

	// main queue must support all types of commands:
	// graphics, compute, transfer and present
	VkRc<vk::queue> main_queue;

	// command pool for all command buffers that are expected to be re-recorded
	// very rarely and don't need to be reset by ResetCmdPool() method.
	VkRc<vk::cmd_pool> static_cmd_pool;

	// command pool for all command buffers created with CmdBufferInfo::usage_once
	// flag and that must be reset every frame by calling ResetCmdPool() method.
	VkRc<vk::cmd_pool> dynamic_cmd_pool;

	// every dynamic command submission generates a fence, and device
	// uses this fence to wait until all commands are done before
	// a call to vkResetCommandPool
	ut::Array<VkFence> dynamic_cmd_fences;

	// array of displays that enqueued presentation and
	// waiting a moment to swap buffers
	ut::Array< ut::Ref<Display> > swap_buffer_queue;

	// physical device that is used for rendering
	VkPhysicalDevice gpu;

	// queue families available on physical device
	ut::Map<vulkan_queue::FamilyType, vulkan_queue::Family> queue_families;

private:
	// Creates vkInstance object.
	static VkInstance CreateVulkanInstance();

	// Vulkan message callback.
	static VKAPI_ATTR VkBool32 VKAPI_CALL VulkanDbgCallback(VkDebugUtilsMessageSeverityFlagBitsEXT,
	                                                        VkDebugUtilsMessageTypeFlagsEXT,
	                                                        const VkDebugUtilsMessengerCallbackDataEXT*,
	                                                        void*);

	// Returns 'true' if system supports validation layer.
	static bool CheckValidationLayerSupport();

	// Returns physical device that suits best.
	static ut::Optional<VkPhysicalDevice> SelectPreferredPhysicalDevice(const ut::Array<VkPhysicalDevice>& devices);

	// Returns an array of physical devices.
	ut::Array<VkPhysicalDevice> EnumeratePhysicalDevices();

	// Returns a map of queue-type/family-id values.
	ut::Map<vulkan_queue::FamilyType, vulkan_queue::Family> GetQueueFamilies(VkPhysicalDevice gpu);

	// Create intercepter for messages generated by Vulkan instance.
	VkDebugUtilsMessengerEXT CreateDbgMessenger();

	// Creates VkDevice object.
	VkDevice CreateVulkanDevice();

	// Creates desired queue.
	VkRc<vk::queue> CreateQueue(vulkan_queue::FamilyType family_type, uint32_t id);

	// Creates command pool.
	VkRc<vk::cmd_pool> CreateCmdPool(VkCommandPoolCreateFlags flags);
};
//----------------------------------------------------------------------------//
END_NAMESPACE(render)
END_NAMESPACE(ve)
//----------------------------------------------------------------------------//
#endif // VE_VULKAN
//----------------------------------------------------------------------------//
//----------------------------------------------------------------------------//
//----------------------------------------------------------------------------//
